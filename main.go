package main

import (
    "log"
    "os"
    "strconv"
    "time"

    tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
    "github.com/joho/godotenv"
)

var bot *tgbotapi.BotAPI

var awaitingCityInput = make(map[int64]bool)
var awaitingCustomTime = make(map[int64]bool)
var menuState = make(map[int64]string)

var channelID string

func main() {
    _ = godotenv.Load()

    channelID = os.Getenv("CHANNEL_ID")
    if channelID == "" {
        log.Panic("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    }

    var err error
    bot, err = tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_TOKEN"))
    if err != nil {
        log.Panic(err)
    }

    db := InitDB()
    go startScheduler(db)
    go startChannelScheduler()

    u := tgbotapi.NewUpdate(0)
    u.Timeout = 60
    updates := bot.GetUpdatesChan(u)

    for update := range updates {
        if update.Message == nil {
            continue
        }

        chatID := update.Message.Chat.ID
        text := update.Message.Text

        if update.Message.Location != nil {
            lat, lon := update.Message.Location.Latitude, update.Message.Location.Longitude
            forecast, cityName, err := getWeatherByCoordsAndCity(lat, lon)
            if err != nil {
                bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."))
                continue
            }
            SetUserCity(db, chatID, cityName)
            bot.Send(tgbotapi.NewMessage(chatID, "–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: "+cityName))
            bot.Send(tgbotapi.NewMessage(chatID, forecast))
            continue
        }

        if (menuState[chatID] == "forecast" || menuState[chatID] == "subs" || menuState[chatID] == "citySelection") && text == "üîô –ù–∞–∑–∞–¥" {
            showMainMenu(chatID)
            continue
        }

        if awaitingCityInput[chatID] {
            SetUserCity(db, chatID, text)
            awaitingCityInput[chatID] = false
            bot.Send(tgbotapi.NewMessage(chatID, "–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: "+text))
            showMainMenu(chatID)
            continue
        }

        if awaitingCustomTime[chatID] {
            hour, err := strconv.Atoi(text)
            if err != nil || hour < 0 || hour > 23 {
                bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å –æ—Ç 0 –¥–æ 23"))
                continue
            }
            SetCustomHour(db, chatID, hour)
            awaitingCustomTime[chatID] = false
            SetSubscription(db, chatID, "custom")
            bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞ "+strconv.Itoa(hour)+":00"))
            showSubscriptionsMenu(chatID)
            continue
        }

        switch menuState[chatID] {
        case "main":
            switch text {
            case "üìç –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å":
                city := GetUserCity(db, chatID)
                if city == "" {
                    bot.Send(tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≥–æ—Ä–æ–¥!"))
                    continue
                }
                msg, _ := getWeather(city)
                bot.Send(tgbotapi.NewMessage(chatID, msg))

            case "üìÖ –ü—Ä–æ–≥–Ω–æ–∑—ã":
                showForecastMenu(chatID)

            case "‚è∞ –ü–æ–¥–ø–∏—Å–∫–∏":
                showSubscriptionsMenu(chatID)

            case "üèô –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞":
                showCitySelectionMenu(chatID)

            default:
                bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é."))
            }

        case "forecast":
            city := GetUserCity(db, chatID)
            if city == "" {
                bot.Send(tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≥–æ—Ä–æ–¥!"))
                showMainMenu(chatID)
                continue
            }
            switch text {
            case "‚è± –ß–µ—Ä–µ–∑ —á–∞—Å":
                msg, _ := getHourlyForecast(city)
                bot.Send(tgbotapi.NewMessage(chatID, msg))
            case "üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞":
                msg, _ := getTomorrowForecast(city)
                bot.Send(tgbotapi.NewMessage(chatID, msg))
            case "üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é":
                msg, _ := getWeeklyForecast(city)
                bot.Send(tgbotapi.NewMessage(chatID, msg))
            case "üîô –ù–∞–∑–∞–¥":
                showMainMenu(chatID)
            default:
                bot.Send(tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é."))
            }

        case "subs":
            switch text {
            case "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
                showMySubscriptions(db, chatID)

            case "‚è∞ –£—Ç—Ä–æ":
                SetSubscription(db, chatID, "—É—Ç—Ä–æ")
                bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞: —É—Ç—Ä–æ (8:00) –≤–∫–ª—é—á–µ–Ω–∞"))

            case "üåô –í–µ—á–µ—Ä":
                SetSubscription(db, chatID, "–≤–µ—á–µ—Ä")
                bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞: –≤–µ—á–µ—Ä (20:00) –≤–∫–ª—é—á–µ–Ω–∞"))

            case "üïê –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è":
                awaitingCustomTime[chatID] = true
                bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å –æ—Ç 0 –¥–æ 23 –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"))

            case "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É—Ç—Ä–∞":
                UnsetSpecificSubscription(db, chatID, "—É—Ç—Ä–æ")
                bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ç—Ä–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞"))

            case "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤–µ—á–µ—Ä–∞":
                UnsetSpecificSubscription(db, chatID, "–≤–µ—á–µ—Ä")
                bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–µ—á–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∞"))

            case "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏":
                UnsetSpecificSubscription(db, chatID, "custom")
                bot.Send(tgbotapi.NewMessage(chatID, "–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"))

            case "üîô –ù–∞–∑–∞–¥":
                showMainMenu(chatID)

            default:
                bot.Send(tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é."))
            }

        case "citySelection":
            switch text {
            case "üèô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é":
                awaitingCityInput[chatID] = true
                bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:"))

            case "üîô –ù–∞–∑–∞–¥":
                showMainMenu(chatID)

            default:
                bot.Send(tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."))
            }

        default:
            showMainMenu(chatID)
        }
    }
}


func showMainMenu(chatID int64) {
    menuState[chatID] = "main"
    msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üìç –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"),
            tgbotapi.NewKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑—ã"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("‚è∞ –ü–æ–¥–ø–∏—Å–∫–∏"),
            tgbotapi.NewKeyboardButton("üèô –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"),
        ),
    )
    bot.Send(msg)
}

func showForecastMenu(chatID int64) {
    menuState[chatID] = "forecast"
    msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑")
    msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("‚è± –ß–µ—Ä–µ–∑ —á–∞—Å"),
            tgbotapi.NewKeyboardButton("üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
        ),
    )
    bot.Send(msg)
}

func showSubscriptionsMenu(chatID int64) {
    menuState[chatID] = "subs"
    msg := tgbotapi.NewMessage(chatID, "–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫")
    msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("‚è∞ –£—Ç—Ä–æ"),
            tgbotapi.NewKeyboardButton("üåô –í–µ—á–µ—Ä"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üïê –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
        ),
    )
    bot.Send(msg)
}

func showCitySelectionMenu(chatID int64) {
    menuState[chatID] = "citySelection"
    msg := tgbotapi.NewMessage(chatID, "–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞")
    msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üèô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButtonLocation("üì° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
        ),
    )
    bot.Send(msg)
}

func showMySubscriptions(db *DB, chatID int64) {
    subs := GetUserSubscriptions(db, chatID)
    if len(subs) == 0 {
        bot.Send(tgbotapi.NewMessage(chatID, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."))
        return
    }

    text := "–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
    rows := [][]tgbotapi.KeyboardButton{}

    for _, sub := range subs {
        switch sub {
        case "—É—Ç—Ä–æ":
            text += "‚úÖ –£—Ç—Ä–æ (8:00)\n"
            rows = append(rows, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É—Ç—Ä–∞")))
        case "–≤–µ—á–µ—Ä":
            text += "‚úÖ –í–µ—á–µ—Ä (20:00)\n"
            rows = append(rows, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤–µ—á–µ—Ä–∞")))
        case "custom":
            hour := GetCustomHour(db, chatID)
            text += "‚úÖ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: " + strconv.Itoa(hour) + ":00\n"
            rows = append(rows, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")))
        }
    }

    rows = append(rows, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥")))

    msg := tgbotapi.NewMessage(chatID, text)
    msg.ReplyMarkup = tgbotapi.ReplyKeyboardMarkup{
        Keyboard:       rows,
        ResizeKeyboard: true,
    }
    bot.Send(msg)
}


func startScheduler(db *DB) {
    go func() {
        for {
            now := time.Now()
            hour := now.Hour()

            if hour == 8 {
                subs := GetSubscribers(db, "—É—Ç—Ä–æ")
                sendWeatherToUsers(db, subs)
            }

            if hour == 20 {
                subs := GetSubscribers(db, "–≤–µ—á–µ—Ä")
                sendWeatherToUsers(db, subs)
            }

            subs := GetSubscribersByHour(db, hour)
            sendWeatherToUsers(db, subs)

            time.Sleep(time.Minute)
        }
    }()
}

func sendWeatherToUsers(db *DB, users []int64) {
    for _, userID := range users {
        city := GetUserCity(db, userID)
        if city == "" {
            continue
        }
        forecast, err := getWeather(city)
        if err != nil {
            continue
        }
        msg := tgbotapi.NewMessage(userID, "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n"+forecast)
        bot.Send(msg)
    }
}


func startChannelScheduler() {
    go func() {
        for {
            now := time.Now()
            hour, min := now.Hour(), now.Minute()

            if min == 0 {
                sendHourlyWeatherToChannel()
            }

            if hour == 7 && min == 0 {
                sendDailyForecastToChannel()
            }

            time.Sleep(time.Second * 30)
        }
    }()
}

func sendDailyForecastToChannel() {
    city := "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"
    msg, err := getWeeklyForecast(city)
    if err != nil {
        log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞:", err)
        return
    }
    fullMsg := "üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è " + city + ":\n" + msg
    m := tgbotapi.NewMessageToChannel(channelID, fullMsg)
    if _, err := bot.Send(m); err != nil {
        log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –∫–∞–Ω–∞–ª:", err)
    }
}

func sendHourlyWeatherToChannel() {
    city := "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"
    msg, err := getWeather(city)
    if err != nil {
        log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞:", err)
        return
    }
    fullMsg := "‚è∞ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ " + city + ":\n" + msg
    m := tgbotapi.NewMessageToChannel(channelID, fullMsg)
    if _, err := bot.Send(m); err != nil {
        log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤ –∫–∞–Ω–∞–ª:", err)
    }
}
